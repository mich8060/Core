$baseline_px: 18;
$mobile-min: '0px';
$mobile-max: '700px';
$tablet-min: '701px';
$tablet-max: '1024px';
$primary-font: "NimbusSanNov", "Helvetica Neue", Helvetica, Arial, Sans-serif;
$secondary-font: "Playfair Display", "Baskerville Old Face", Baskerville, serif;
$fallback-font: "Helvetica Neue", Helvetica, Arial, Sans-serif;
$color-white: #FFF;
$color-gray: #F3F3F3;
$color-darkgray: #222;
$color-black: #000;
$color-blue: #0072bc;
$color-darkblue: #004a80;
$color-fuchsia:#fa4b4b;

/* Appearance	*/
@mixin appearance($type: none) {
	-webkit-appearance:$type;
	   -moz-appearance:$type;
	    	appearance:$type;
}

/* BACKGROUND GRADIENT */
@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
    background-color: $startColor;
    background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
    background-image: -webkit-linear-gradient(top, $startColor, $endColor);
    background-image:    -moz-linear-gradient(top, $startColor, $endColor);
    background-image:     -ms-linear-gradient(top, $startColor, $endColor);
    background-image:      -o-linear-gradient(top, $startColor, $endColor);
    background-image:         linear-gradient(top, $startColor, $endColor);
    filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr=$startColor, EndColorStr=$endColor);
}


/* BACKGROUND SIZE */
@mixin background-size($width: 100%, $height: 100%) {
     -moz-background-size: $width $height;
  -webkit-background-size: $width $height;
          background-size: $width $height;
}


/* BORDER RADIUS */
@mixin border-radius($radius: 5px) {
	-webkit-border-radius: $radius;
       -moz-border-radius: $radius;
    	 -o-border-radius: $radius;
    		border-radius: $radius;
}

@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
    -webkit-border-top-left-radius:     $topLeftRadius;
    -webkit-border-top-right-radius:    $topRightRadius;
    -webkit-border-bottom-right-radius: $bottomLeftRadius;
    -webkit-border-bottom-left-radius:  $bottomRightRadius;

    -moz-border-radius-topleft:     $topLeftRadius;
    -moz-border-radius-topright:    $topRightRadius;
    -moz-border-radius-bottomright: $bottomLeftRadius;
    -moz-border-radius-bottomleft:  $bottomRightRadius;

    border-top-left-radius:     $topLeftRadius;
    border-top-right-radius:    $topRightRadius;
    border-bottom-right-radius: $bottomLeftRadius;
    border-bottom-left-radius:  $bottomRightRadius;
}

/* BOX */
@mixin box($orient: horizontal, $pack: center, $align: center) {
    display: -webkit-box;
    display: -moz-box;
    display: box;

    -webkit-box-orient: $orient;
    -moz-box-orient:    $orient;
    box-orient:         $orient;

    -webkit-box-pack: $pack;
    -moz-box-pack:    $pack;
    box-pack:         $pack;

    -webkit-box-align: $align;
    -moz-box-align:    $align;
    box-align:         $align;
}

/* BOX RGBA */
@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {
  background-color: transparent;
  background-color: rgba($r, $g, $b, $opacity);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr#$color,endColorstr=$color);
            zoom:   1;
}


/* BOX SHADOW */
@mixin box-shadow($shadow1, $shadow2:false, $shadow3:false, $shadow4:false, $shadow5:false) {
 $params: $shadow1;
  @if $shadow2 
    { $params: $shadow1, $shadow2; }
    @if $shadow3 != false
      { $params: $shadow1, $shadow2, $shadow3; }
      @if $shadow4 != false
        { $params: $shadow1, $shadow2, $shadow3, $shadow4; }
        @if $shadow5 != false
          { $params: $shadow1, $shadow2, $shadow3, $shadow4, $shadow5; }

  -webkit-box-shadow: $params;
  -moz-box-shadow: $params;
  box-shadow: $params;

}

/* BOX SIZING */
@mixin box-sizing($type: border-box) {
    -webkit-box-sizing:   $type;
    -moz-box-sizing:      $type;
    box-sizing:           $type;
}

/* COLUMNS */
@mixin columns($count: 3, $gap: 10) {
    -webkit-column-count: $count;
    -moz-column-count:    $count;
    column-count:         $count;

    -webkit-column-gap:   $gap;
    -moz-column-gap:      $gap;
    column-gap:           $gap;
}

/* DOUBLE BORDERS */
@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
    border: 1px solid $colorOne;

    -webkit-box-shadow: 0 0 0 1px $colorTwo;
    -moz-box-shadow:    0 0 0 1px $colorTwo;
    box-shadow:         0 0 0 1px $colorTwo;

    @include border-radius( $radius );
}

/* HYPHENS 	*/
@mixin hyphens($type: auto) {
	-webkit-hyphens:$type;
	-moz-hyphens:$type;
	-ms-hyphens:$type;
	hyphens:$type;
}

/* Cross Browser Inline-Block */
@mixin inline-block {
  display: inline-block; /* For normal, healthy browsers */
 
  * html & { /* for IE6 */
    display: inline;
  }
 
  *+html & { /* for IE7 */
    display: inline;
  }
}


/* FLEX */
@mixin flex($value: 1) {
    -webkit-box-flex: $value;
    -moz-box-flex:    $value;
    box-flex:         $value;
}

/* FLIP */
@mixin flip($scaleX: -1) {
	-moz-transform:    scaleX($scaleX);
	-o-transform:      scaleX($scaleX);
	-webkit-transform: scaleX($scaleX);
	transform:         scaleX($scaleX);
	filter:            FlipH;
	-ms-filter:        "FlipH";
}

/* FONT FACE */
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf') {
  font-family: $fontFamily;
  src: url($eotFileSrc)  format('eot'),
       url($woffFileSrc) format('woff'),
       url($ttfFileSrc)  format('truetype');
}

/* Font Smoothing */
@mixin font-smoothing($type:antialiased) {
	-webkit-font-smoothing: $type;
	font-smoothing: $type;
}

/* OPACITY */
@mixin opacity($opacity: 0.5) {
    filter:         alpha(opacity=($opacity * 100));
    -ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + ($opacity * 100) + ")";
    -moz-opacity:   $opacity;
    -khtml-opacity: $opacity;
    opacity:        $opacity;
}


/* Placeholder Test	*/
@mixin placeholder($color: #999){
	::-webkit-input-placeholder  { color:$color; }
	input:-moz-placeholder { color:$color; }
}

/* OUTLINE RADIUS */
@mixin outline-radius($radius: 5px) {
    -webkit-outline-radius: $radius;
    -moz-outline-radius:    $radius;
    outline-radius:         $radius;
}

/* RESIZE */
@mixin resize($direction: both) {
    -webkit-resize: $direction;
    -moz-resize:    $direction;
    resize:         $direction;
}

/* ROTATE*/
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
     -moz-transform: rotate($deg + deg);
       -o-transform: rotate($deg + deg);
  -webkit-transform: rotate($deg + deg);
      -ms-transform: rotate($deg + deg);
          transform: rotate($deg + deg);
             filter: progid:DXImageTransform.Microsoft.Matrix(
                     M11=$m11, M12=$m12,M21=$m21, M22=$m22, sizingMethod='auto expand');
               zoom: 1;
}

/* TEXT SIZE ADJUST	*/
@mixin text-size-adjust($size: 100%){
	-webkit-text-size-adjust: $size; 
	-ms-text-size-adjust: $size;
	text-size-adjust: $size;
}

/* TEXT SHADOW */
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
    text-shadow: $x $y $blur $color;
}

/* TRANSFORM  */
@mixin transform($params) {
    -webkit-transform: $params;
       -moz-transform: $params;
	    -ms-transform: $params;
	     -o-transform: $params;
     		transform: $params;
}

/* TRANSITION */
@mixin transition($what: all, $length: 1s, $easing: ease-in-out) {
    -webkit-transition: $what $length $easing;
       -moz-transition: $what $length $easing;
    	-ms-transition: $what $length $easing;
   	 	 -o-transition: $what $length $easing;
    		transition: $what $length $easing;

}

/* TRIPLE BORDERS */
@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
    border: 1px solid $colorOne;

    @include border-radius($radius);

    -webkit-box-shadow: 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    -moz-box-shadow:    0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
    box-shadow:         0 0 0 1px $colorTwo, 0 0 0 2px $colorThree;
}

@mixin breakpoint($point) {
  	@if $point == mobile {
    	@media only screen and (min-width: $mobile-min) and (max-width: $mobile-max) { @content; }
  	}
  	@else if $point == tablet {
		@media only screen and (min-width: $tablet-min) and (max-width: $tablet-max) { @content; }
  	}
}

/* Convert to REM Units	*/

@mixin rem($property, $px_values) {
	$baseline_rem: ($baseline_px / 1rem);
	
	#{$property}: $px_values + px;
	
	@if type-of($px_values) == 'number' {
		#{$property}: $px_values / $baseline_rem;
	}
 
	// If there is more than one value, create a list and perform equations on each value
	@else {
 
		// Create an empty list that we can dump values into
		$rem_values: ();
 
		@each $value in $px_values {
 
			// If the value is zero, return 0
			@if $value == 0 { 
				$rem_values: append($rem_values, $value); 
			}
 
			// If the value is not zero, convert it from px to rem
			@else {
				$rem_values: append($rem_values, ($value / $baseline_rem) );
			}
 
		}
		#{$property}: $rem_values;
	}
}

@mixin font-size($sizeValue: 16){
  font-size: $sizeValue + px;
  font-size: ($sizeValue / $baseline_px) + rem;
}

@mixin line-height($sizeValue: 16){
  line-height: $sizeValue + px;
  line-height: ($sizeValue / $baseline_px) + rem;
}

@mixin min-max-width($min: 0, $max: 6000) {
	min-width: $min + px;
	max-width: $max + px;
}

@mixin grid($columns:12, $margins:10, $container:1000, $context:false) {
	$col-width: ($container / $columns);
	$col-percentage: percentage($col-width / $container);
		
	/* Global Grid Elements
	----------------------------------------------------------------------------------------------------*/
	
	.grid_1 {
		display:block;
		float:left;
		position:relative;
		padding-left:$margins + px;
		padding-right:$margins + px;
		@include box-sizing(border-box);
	}

	@for $i from 1 through 12 {
		.grid_#{$i} { 
			@extend .grid_1; 
		}
	}
	
	/* Grid - Columns
	----------------------------------------------------------------------------------------------------*/
	
	@if $context == false {
		@for $i from 1 through $columns {
			.container_#{$columns} .grid_#{$i} {
				$percent-width: ($i * $col-width);
				width: percentage($percent-width / $container);
			}
		}
	}
	@else {
		@for $i from 1 through $context {
			@if $i >= $columns {
				.container_#{$context} .grid_#{$i} {
					width: 100%;
				}
			}
			@else {
				.container_#{$context} .grid_#{$i} {
					$percent-width: ($i * $col-width);
					width: percentage($percent-width / $container);
				}
			}
		}
	}

	
	@if $columns > 3 {	
	
		/* Prefix Extra Space
		----------------------------------------------------------------------------------------------------*/

		@if $context == false {
			@for $i from 1 through ($columns - 1) {
				.container_#{$columns} .prefix_#{$i} {
					margin-left: percentage($i / $columns);
				}
			}
		}
		@else {
			@for $i from 1 through ($context - 1) {
				@if $i >= $columns {
					.container_#{$context} .prefix_#{$i} {
						margin-left: 0%;
					}
				}
				@else {
					.container_#{$context} .prefix_#{$i} {
						margin-left: percentage($i / $columns);
					}
				}
			}
		}
		
		/* Suffix Extra Space
		----------------------------------------------------------------------------------------------------*/
		@if $context == false {
			@for $i from 1 through ($columns - 1) {
				.container_#{$columns} .suffix_#{$i} {
					margin-right: percentage($i / $columns);
				}
			}
		}
		@else {
			@for $i from 1 through ($context - 1) {
				@if $i >= $columns {
					.container_#{$context} .suffix_#{$i} {
						margin-right: 0%;
					}
				}
				@else {
					.container_#{$context} .suffix_#{$i} {
						margin-right: percentage($i / $columns);
					}
				}
			}
		}
		
		/* Push Space
		----------------------------------------------------------------------------------------------------*/

		@if $context == false {
			@for $i from 1 through ($columns - 1) {
				.container_#{$columns} .push_#{$i} {
					left: percentage($i / $columns);
				}
			}
		}
		@else {
			@for $i from 1 through ($context - 1) {
				@if $i >= $columns {
					.container_#{$context} .push_#{$i} {
						left: 0%;
					}
				}
				@else {
					.container_#{$context} .push_#{$i} {
						left: percentage($i / $columns);
					}
				}
			}
		}


		/* Pull Space
		----------------------------------------------------------------------------------------------------*/
		
		@if $context == false {
			@for $i from 1 through ($columns - 1) {
				.container_#{$columns} .pull_#{$i} {
					left: percentage(-($i / $columns));
				}
			}
		}
		@else {
			@for $i from 1 through ($context - 1) {
				@if $i >= $columns {
					.container_#{$context} .pull_#{$i} {
						left: 0%;
					}
				}
				@else {
					.container_#{$context} .pull_#{$i} {
						left: percentage(-($i / $columns));
					}
				}
			}
		}
		
	}
	@else {
		
		@for $i from 1 through ($context - 1) {
			.container_#{$context} .prefix_#{$i} {
				margin-left: 0%;
			}
		}
		
		@for $i from 1 through ($context - 1) {
			.container_#{$context} .suffix_#{$i} {
				margin-right: 0%;
			}
		}
		
		@for $i from 1 through ($context - 1) {
			.container_#{$context} .push_#{$i} {
				left: 0%;
			}
		}
		
		@for $i from 1 through ($context - 1) {
			.container_#{$context} .pull_#{$i} {
				left: 0%;
			}
		}
		
		
		
	}
	
}